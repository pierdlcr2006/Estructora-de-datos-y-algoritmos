# üå≥ Desaf√≠o 2: Construcci√≥n de √Årbol de Expresi√≥n desde Infijo
# Objetivo: Crear un √°rbol de expresi√≥n a partir de una expresi√≥n matem√°tica en notaci√≥n infija
# Caracter√≠sticas principales:
# - Conversi√≥n de infijo a postfijo
# - Construcci√≥n de √°rbol usando m√©todo de pila
# - Manejo de expresiones anidadas

class ExpressionNode:
    """
    Nodo para representar un √°rbol de expresi√≥n.
    
    Atributos:
    ----------
    value : str
        Valor del nodo (operador u operando)
    left : ExpressionNode, opcional
        Hijo izquierdo del nodo
    right : ExpressionNode, opcional
        Hijo derecho del nodo
    """
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
    
    def __str__(self, level=0):
        """
        Representaci√≥n en cadena del √°rbol para visualizaci√≥n.
        
        Par√°metros:
        -----------
        level : int, opcional
            Nivel de profundidad para impresi√≥n indentada
        
        Retorna:
        --------
        str
            Representaci√≥n en cadena del √°rbol
        """
        # üåø Construcci√≥n de representaci√≥n visual del √°rbol
        ret = "\t" * level + str(self.value) + "\n"
        if self.left:
            ret += self.left.__str__(level + 1)
        if self.right:
            ret += self.right.__str__(level + 1)
        return ret

def infix_to_postfix(tokens):
    """
    Convierte una expresi√≥n de infijo a postfijo.
    (Misma implementaci√≥n del Desaf√≠o 1)
    """
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
    output, operator_stack = [], []
    
    for token in tokens:
        if token not in '+-*/^()':
            output.append(token)
        elif token == '(':
            operator_stack.append(token)
        elif token == ')':
            while operator_stack and operator_stack[-1] != '(':
                output.append(operator_stack.pop())
            if operator_stack and operator_stack[-1] == '(':
                operator_stack.pop()
        elif token in '+-*/^':
            while (operator_stack and 
                   operator_stack[-1] != '(' and 
                   precedence.get(operator_stack[-1], 0) >= precedence.get(token, 0)):
                output.append(operator_stack.pop())
            operator_stack.append(token)
    
    while operator_stack:
        output.append(operator_stack.pop())
    
    return output

def build_tree_from_infix(tokens):
    """
    Construye un √°rbol de expresi√≥n a partir de tokens en notaci√≥n infija.
    
    Par√°metros:
    -----------
    tokens : list
        Lista de tokens en notaci√≥n infija
    
    Retorna:
    --------
    ExpressionNode
        Ra√≠z del √°rbol de expresi√≥n
    """
    # üîÑ Primero convertir infijo a postfijo
    postfix = infix_to_postfix(tokens)
    
    # üìö Pila para construcci√≥n del √°rbol
    stack = []
    
    for token in postfix:
        # üî¢ Si es operando, crear nodo y apilar
        if token not in '+-*/^':
            node = ExpressionNode(token)
            stack.append(node)
        else:
            # üß© Si es operador, crear nodo y conectar operandos
            node = ExpressionNode(token)
            
            # ‚ö†Ô∏è Asegurar que hay suficientes operandos
            if len(stack) >= 2:
                # Orden importante: primero hijo derecho, luego izquierdo
                node.right = stack.pop()
                node.left = stack.pop()
                
                # Apilar sub√°rbol
                stack.append(node)
    
    # üèÅ Retornar ra√≠z del √°rbol
    return stack[0] if stack else None

def test_build_tree_from_infix():
    """
    Bater√≠a de pruebas para construcci√≥n de √°rbol de expresi√≥n.
    Prueba diversos escenarios de construcci√≥n de √°rbol.
    """
    # üß™ Casos de prueba
    test_cases = [
        # Caso 1: Expresi√≥n simple
        {
            'input': ['2', '+', '3'],
            'description': 'Expresi√≥n b√°sica'
        },
        # Caso 2: Expresi√≥n con precedencia
        {
            'input': ['2', '+', '3', '*', '4'],
            'description': 'Expresi√≥n con multiplicaci√≥n'
        },
        # Caso 3: Expresi√≥n con par√©ntesis
        {
            'input': ['(', '2', '+', '3', ')', '*', '4'],
            'description': 'Expresi√≥n con par√©ntesis'
        },
        # Caso 4: Expresi√≥n compleja
        {
            'input': ['5', '*', '(', '3', '+', '2', ')', '-', '10'],
            'description': 'Expresi√≥n compleja con par√©ntesis'
        }
    ]
    
    # üïµÔ∏è Ejecutar pruebas
    for i, caso in enumerate(test_cases, 1):
        print(f"üå≥ Prueba {i}: {caso['description']}")
        print(f"   Entrada: {caso['input']}")
        
        # Construir √°rbol
        raiz = build_tree_from_infix(caso['input'])
        
        # Mostrar estructura del √°rbol
        print("   Estructura del √°rbol:")
        print(raiz)
        print("\n")

# Descomentar para ejecutar pruebas
test_build_tree_from_infix()