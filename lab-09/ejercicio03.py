# ------------------------- #
# ALTURA DE √ÅRBOL GEN√âRICO
# ------------------------- #
# Implementaci√≥n para calcular la altura m√°xima en un √°rbol 
# donde cada nodo puede tener m√∫ltiples hijos (√°rbol gen√©rico)

# ------------------------- #
# DEFINICI√ìN DE CLASES
# ------------------------- #
class GenericTreeNode:
    """
    Representa un nodo en un √°rbol gen√©rico con m√∫ltiples hijos.
    
    Atributos:
    ----------
    value : any
        Valor almacenado en el nodo
    children : list
        Lista de nodos hijos
    """
    def __init__(self, value):
        """
        Inicializa un nodo del √°rbol.
        
        Par√°metros:
        -----------
        value : any
            Valor a almacenar en el nodo
        """
        self.value = value
        self.children = []
    
    def add_child(self, child):
        """
        Agrega un nodo hijo al nodo actual.
        
        Par√°metros:
        -----------
        child : GenericTreeNode
            Nodo hijo a agregar
        """
        self.children.append(child)
    
    def __str__(self, level=0):
        """
        Representaci√≥n en cadena del √°rbol para visualizaci√≥n.
        
        Par√°metros:
        -----------
        level : int, opcional
            Nivel de profundidad para impresi√≥n indentada
        
        Retorna:
        --------
        str
            Representaci√≥n visual del √°rbol
        """
        # Impresi√≥n con sangr√≠a para mostrar estructura jer√°rquica
        ret = "\t" * level + str(self.value) + "\n"
        for child in self.children:
            ret += child.__str__(level + 1)
        return ret
    
    def to_ascii_tree(self, prefix="", is_last=True, is_root=True):
        """
        Genera una representaci√≥n ASCII del √°rbol m√°s visual.
        
        Par√°metros:
        -----------
        prefix : str
            Prefijo para la l√≠nea actual
        is_last : bool
            Indica si el nodo es el √∫ltimo hijo de su padre
        is_root : bool
            Indica si el nodo es la ra√≠z del √°rbol
        
        Retorna:
        --------
        str
            Representaci√≥n ASCII del √°rbol
        """
        result = ""
        
        # Determinar el prefijo para el nodo actual
        if not is_root:
            result += prefix + ("‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ ") + str(self.value) + "\n"
        else:
            result += prefix + str(self.value) + "\n"
        
        # Prefijo para los hijos
        child_prefix = prefix + ("    " if is_last else "‚îÇ   ")
        
        # Procesar los hijos
        child_count = len(self.children)
        for i, child in enumerate(self.children):
            is_last_child = i == child_count - 1
            result += child.to_ascii_tree(child_prefix, is_last_child, False)
            
        return result

# ------------------------- #
# ALGORITMO DE ALTURA
# ------------------------- #
def tree_height(root):
    """
    Calcula la altura de un √°rbol gen√©rico de manera recursiva.
    
    Par√°metros:
    -----------
    root : GenericTreeNode
        Ra√≠z del √°rbol
    
    Retorna:
    --------
    int
        Altura del √°rbol
    
    Estrategia:
    -----------
    1. Si el √°rbol est√° vac√≠o, retorna 0
    2. Si no tiene hijos, retorna 1
    3. Encuentra la m√°xima altura entre todos los sub√°rboles
    4. Retorna 1 (nodo actual) + m√°xima altura de sub√°rboles
    """
    # Caso base: √°rbol vac√≠o
    if root is None:
        return 0
    
    # Caso base: nodo hoja (sin hijos)
    if not root.children:
        return 1
    
    # Calcular altura m√°xima entre todos los hijos
    max_child_height = 0
    for child in root.children:
        # Recursivamente encontrar altura de cada sub√°rbol
        child_height = tree_height(child)
        max_child_height = max(max_child_height, child_height)
    
    # Retornar 1 (nodo actual) + altura m√°xima de sub√°rboles
    return 1 + max_child_height

# ------------------------- #
# FUNCIONES DE VISUALIZACI√ìN
# ------------------------- #
def print_path_to_deepest_node(root, current_path=None, max_path=None):
    """
    Encuentra y retorna el camino m√°s largo desde la ra√≠z hasta una hoja.
    
    Par√°metros:
    -----------
    root : GenericTreeNode
        Nodo ra√≠z del √°rbol o sub√°rbol
    current_path : list, opcional
        Camino acumulado hasta el nodo actual
    max_path : list, opcional
        Camino m√°s largo encontrado hasta ahora
    
    Retorna:
    --------
    list
        Lista de valores que representan el camino m√°s largo
    """
    if root is None:
        return []
    
    # Inicializamos las listas si es la primera llamada
    if current_path is None:
        current_path = []
    if max_path is None:
        max_path = []
    
    # Agregamos el nodo actual al camino
    current_path = current_path + [root.value]
    
    # Si es una hoja, comprobamos si es el camino m√°s largo
    if not root.children:
        if len(current_path) > len(max_path):
            return current_path
        else:
            return max_path
    
    # Recursivamente buscamos el camino m√°s largo entre todos los hijos
    for child in root.children:
        max_path = print_path_to_deepest_node(child, current_path, max_path)
    
    return max_path

# ------------------------- #
# BATER√çA DE PRUEBAS
# ------------------------- #
def test_tree_height():
    """
    Bater√≠a de pruebas para verificar la funci√≥n tree_height.
    Cubre diversos escenarios de estructura de √°rbol.
    """
    # Casos de prueba con diferentes configuraciones de √°rboles
    test_cases = [
        {
            'name': '√Årbol Vac√≠o',
            'tree': None,
            'expected': 0,
            'description': 'Un √°rbol sin nodos (None)'
        },
        {
            'name': '√Årbol de Un Nodo',
            'tree': GenericTreeNode('Ra√≠z'),
            'expected': 1,
            'description': 'Un solo nodo sin hijos'
        },
        {
            'name': '√Årbol Lineal',
            'tree': _create_linear_tree(),
            'expected': 4,
            'description': '√Årbol donde cada nodo tiene exactamente un hijo'
        },
        {
            'name': '√Årbol Balanceado',
            'tree': _create_balanced_tree(),
            'expected': 3,
            'description': '√Årbol donde los nodos tienen m√∫ltiples hijos a la misma profundidad'
        },
        {
            'name': '√Årbol No Balanceado',
            'tree': _create_unbalanced_tree(),
            'expected': 6,
            'description': '√Årbol con ramas de diferentes longitudes'
        }
    ]
    
    # Contadores para el resumen final
    tests_totales = len(test_cases)
    tests_pasados = 0
    
    # Encabezado de la tabla de resultados
    print("\n" + "=" * 80)
    print(f"{'üå≥ PRUEBAS DE C√ÅLCULO DE ALTURA EN √ÅRBOLES GEN√âRICOS':^80}")
    print("=" * 80)
    
    # Ejecutar cada caso de prueba
    for i, caso in enumerate(test_cases, 1):
        # Calcular altura
        altura = tree_height(caso['tree'])
        es_correcto = altura == caso['expected']
        
        if es_correcto:
            tests_pasados += 1
        
        # Separador entre pruebas
        print(f"\n{'-' * 80}")
        
        # Informaci√≥n de la prueba
        print(f"üß© PRUEBA {i}: {caso['name']}")
        print(f"{'-' * 80}")
        
        # Descripci√≥n del caso
        print(f"üìù Descripci√≥n: {caso['description']}")
        
        # Mostrar altura calculada y esperada
        print(f"üßÆ Altura calculada: {altura}")
        print(f"üéØ Altura esperada:  {caso['expected']}")
        
        # Indicador de √©xito o fracaso
        estado = "‚úÖ CORRECTO" if es_correcto else "‚ùå INCORRECTO"
        print(f"\n{estado:^80}")
        
        # Mostrar estructura del √°rbol si no es vac√≠o
        if caso['tree'] is not None:
            print(f"\nüìä Estructura del √°rbol:")
            print(f"{'-' * 40}")
            print(caso['tree'].to_ascii_tree())
            
            # Mostrar camino m√°s largo
            longest_path = print_path_to_deepest_node(caso['tree'])
            print(f"\nüõ§Ô∏è  Camino m√°s largo: {' -> '.join(map(str, longest_path))}")
            print(f"üìè Longitud del camino: {len(longest_path)} nodos")
    
    # Resumen final
    print("\n" + "=" * 80)
    print(f"{'RESUMEN DE RESULTADOS':^80}")
    print("=" * 80)
    print(f"Total de pruebas:     {tests_totales}")
    print(f"Pruebas correctas:    {tests_pasados}")
    print(f"Porcentaje de √©xito:  {(tests_pasados/tests_totales) * 100:.2f}%")
    print("=" * 80 + "\n")

# ------------------------- #
# √ÅRBOLES DE PRUEBA
# ------------------------- #
def _create_linear_tree():
    """Crea un √°rbol lineal para pruebas."""
    linear_tree = GenericTreeNode('A')
    b = GenericTreeNode('B')
    c = GenericTreeNode('C')
    d = GenericTreeNode('D')
    
    linear_tree.add_child(b)
    b.add_child(c)
    c.add_child(d)
    
    return linear_tree

def _create_balanced_tree():
    """Crea un √°rbol balanceado para pruebas."""
    balanced_tree = GenericTreeNode('Ra√≠z')
    b = GenericTreeNode('B')
    c = GenericTreeNode('C')
    d = GenericTreeNode('D')
    
    # Primer nivel de hijos
    balanced_tree.add_child(b)
    balanced_tree.add_child(c)
    balanced_tree.add_child(d)
    
    # Segundo nivel de hijos
    e = GenericTreeNode('E')
    f = GenericTreeNode('F')
    g = GenericTreeNode('G')
    
    b.add_child(e)
    b.add_child(f)
    c.add_child(g)
    
    return balanced_tree

def _create_unbalanced_tree():
    """Crea un √°rbol no balanceado para pruebas."""
    unbalanced_tree = GenericTreeNode('Ra√≠z')
    b = GenericTreeNode('B')
    c = GenericTreeNode('C')
    d = GenericTreeNode('D')
    e = GenericTreeNode('E')
    f = GenericTreeNode('F')
    g = GenericTreeNode('G')
    
    unbalanced_tree.add_child(b)
    unbalanced_tree.add_child(c)
    
    b.add_child(d)
    
    d.add_child(e)
    
    e.add_child(f)
    
    f.add_child(g)
    
    return unbalanced_tree

# ------------------------- #
# EXPLICACI√ìN DID√ÅCTICA
# ------------------------- #
def explain_tree_height():
    """
    Explicaci√≥n detallada del algoritmo de c√°lculo de altura de √°rbol.
    """
    print("\n" + "=" * 80)
    print(f"{'üß† EXPLICACI√ìN DETALLADA: C√ÅLCULO DE ALTURA DE √ÅRBOL':^80}")
    print("=" * 80 + "\n")
    
    print("üìù Pasos del Algoritmo:")
    print("1. Si el √°rbol est√° vac√≠o, la altura es 0")
    print("2. Si el nodo no tiene hijos (es una hoja), la altura es 1")
    print("3. Para nodos con hijos:")
    print("   a. Calcular recursivamente la altura de cada sub√°rbol hijo")
    print("   b. Encontrar la altura m√°xima entre los sub√°rboles")
    print("   c. Sumar 1 (por el nodo actual) a la altura m√°xima\n")
    
    print("üîç Ejemplo Visual de Recursividad:")
    
    # Crear un √°rbol de ejemplo para la explicaci√≥n
    root = GenericTreeNode('A')
    b = GenericTreeNode('B')
    c = GenericTreeNode('C')
    d = GenericTreeNode('D')
    e = GenericTreeNode('E')
    f = GenericTreeNode('F')
    g = GenericTreeNode('G')
    h = GenericTreeNode('H')
    
    root.add_child(b)
    root.add_child(c)
    root.add_child(d)
    
    b.add_child(e)
    b.add_child(f)
    b.add_child(g)
    
    d.add_child(h)
    
    # Mostrar el √°rbol
    print("Estructura del √°rbol de ejemplo:")
    print(root.to_ascii_tree())
    
    print("\nProceso de C√°lculo de Altura:")
    print("1. Nodos E, F, G, H (hojas): altura = 1")
    print("2. Nodo B: altura = 1 + max(altura de E, F, G) = 1 + 1 = 2")
    print("3. Nodo C (no tiene hijos): altura = 1")
    print("4. Nodo D: altura = 1 + altura de H = 1 + 1 = 2")
    print("5. Nodo ra√≠z A: altura = 1 + max(altura de B, C, D) = 1 + max(2, 1, 2) = 1 + 2 = 3")
    
    print("\nüéì Conceptos Clave:")
    print("‚Ä¢ La altura de un √°rbol es la longitud del camino m√°s largo desde la ra√≠z hasta una hoja")
    print("‚Ä¢ El camino se mide contando el n√∫mero de nodos (no de aristas)")
    print("‚Ä¢ La recursividad simplifica enormemente el algoritmo")
    print("‚Ä¢ La funci√≥n max() es esencial para encontrar la rama m√°s profunda\n")
    
    print("üîÑ Complejidad del Algoritmo:")
    print("‚Ä¢ Tiempo: O(n) donde n es el n√∫mero de nodos (visitamos cada nodo exactamente una vez)")
    print("‚Ä¢ Espacio: O(h) donde h es la altura del √°rbol (m√°xima profundidad de recursi√≥n)")
    
    print("\nüí° Aplicaciones Pr√°cticas:")
    print("‚Ä¢ An√°lisis de rendimiento de estructuras de datos en √°rbol")
    print("‚Ä¢ Optimizaci√≥n de consultas en bases de datos jer√°rquicas")
    print("‚Ä¢ C√°lculo de profundidad en √°rboles de decisi√≥n")
    print("‚Ä¢ An√°lisis de estructuras jer√°rquicas como organigramas o taxonom√≠as")
    
    print("\n" + "=" * 80)

# Ejecutar las pruebas y la explicaci√≥n cuando se ejecuta el script directamente
if __name__ == "__main__":
    test_tree_height()
    explain_tree_height()