# üîß Clase base y utilidades de √°rbol
class TreeNode:
    def __init__(self, val):
        self.val = val        # Almacena el valor del nodo
        self.left = None      # Referencia al hijo izquierdo (inicialmente None)
        self.right = None     # Referencia al hijo derecho (inicialmente None)

# Inserta respetando reglas de BST
def insert_bst(root, val):
    if root is None:
        return TreeNode(val)   # Si el √°rbol est√° vac√≠o, crea un nuevo nodo ra√≠z
    if val < root.val:
        root.left = insert_bst(root.left, val)  # Si el valor es menor, inserta en sub√°rbol izquierdo
    else:
        root.right = insert_bst(root.right, val)  # Si el valor es mayor o igual, inserta en sub√°rbol derecho
    return root  # Devuelve la ra√≠z actualizada

# Crea un BST v√°lido desde lista
def build_tree(values):
    root = None  # Comienza con un √°rbol vac√≠o
    for val in values:
        root = insert_bst(root, val)  # Inserta cada valor manteniendo las propiedades del BST
    return root  # Devuelve la ra√≠z del √°rbol construido

# üö´ Crea √°rbol inv√°lido - violaci√≥n en izquierda
def build_invalid_tree1():
    root = TreeNode(5)  # Crea nodo ra√≠z con valor 5
    root.left = TreeNode(6)  # Violaci√≥n: 6 > 5 (en BST v√°lido, hijo izquierdo debe ser menor que padre)
    root.right = TreeNode(7)  # Hijo derecho v√°lido (7 > 5)
    return root  # Retorna √°rbol inv√°lido para pruebas

# üö´ Crea √°rbol inv√°lido - violaci√≥n en derecha
def build_invalid_tree2():
    root = TreeNode(5)  # Crea nodo ra√≠z con valor 5
    root.left = TreeNode(3)  # Hijo izquierdo v√°lido (3 < 5)
    root.right = TreeNode(4)  # Violaci√≥n: 4 < 5 (en BST v√°lido, hijo derecho debe ser mayor que padre)
    return root  # Retorna √°rbol inv√°lido para pruebas

# ‚úÖ Funci√≥n principal: validar BST usando min/max
def is_valid_bst(root):
    def validate(node, min_val, max_val):
        if not node:
            return True  # Un √°rbol vac√≠o es un BST v√°lido
        if not (min_val < node.val < max_val):
            return False  # Si el valor del nodo est√° fuera del rango permitido, no es un BST v√°lido
        return (validate(node.left, min_val, node.val) and  # Verifica sub√°rbol izquierdo con l√≠mite superior actualizado
                validate(node.right, node.val, max_val))    # Verifica sub√°rbol derecho con l√≠mite inferior actualizado
    
    return validate(root, float('-inf'), float('inf'))  # Inicia validaci√≥n con rango infinito

# ‚úÖ Test cases
print(is_valid_bst(build_tree([5, 3, 7, 2, 4, 6, 8])) == True)   # ‚úÖ Valid BST - √°rbol construido correctamente
print(is_valid_bst(build_invalid_tree1()) == False)             # ‚ùå Left violation - valor izquierdo mayor que padre
print(is_valid_bst(build_invalid_tree2()) == False)             # ‚ùå Right violation - valor derecho menor que padre
print(is_valid_bst(build_tree([42])) == True)                   # üå± Single node - un solo nodo siempre es BST v√°lido
print(is_valid_bst(None) == True)                               # üì≠ Empty tree - √°rbol vac√≠o tambi√©n es BST v√°lido
