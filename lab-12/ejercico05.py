from collections import deque

class AVLNode:
    def __init__(self, val):
        self.val = val          # Valor del nodo
        self.left = None        # Hijo izquierdo
        self.right = None       # Hijo derecho
        self.height = 1         # Altura inicial del nodo

class AVLTree:
    def get_height(self, node):
        """üìè Obtiene la altura de un nodo"""
        if not node:            # Si el nodo es None
            return 0            # La altura es 0
        return node.height      # Retorna la altura almacenada
    
    def get_balance(self, node):
        """‚öñÔ∏è Calcula el factor de balance de un nodo"""
        if not node:            # Si el nodo es None
            return 0            # El balance es 0
        return self.get_height(node.left) - self.get_height(node.right)  # Balance = altura_izq - altura_der
    
    def update_height(self, node):
        """üîÑ Actualiza la altura de un nodo basado en sus hijos"""
        if not node:            # Si el nodo es None
            return              # No hacer nada
        # La altura es 1 + la m√°xima altura de los hijos
        node.height = 1 + max(self.get_height(node.left), self.get_height(node.right))
    
    def rotate_right(self, y):
        """‚Ü™Ô∏è Rotaci√≥n simple hacia la derecha"""
        x = y.left              # x ser√° la nueva ra√≠z
        T2 = x.right            # Guardamos el sub√°rbol derecho de x
        
        # Realizamos la rotaci√≥n
        x.right = y             # y se convierte en hijo derecho de x
        y.left = T2             # T2 se convierte en hijo izquierdo de y
        
        # Actualizamos alturas (primero y, luego x)
        self.update_height(y)   # Actualizar altura de y primero
        self.update_height(x)   # Actualizar altura de x despu√©s
        
        return x                # x es la nueva ra√≠z
    
    def rotate_left(self, x):
        """‚Ü©Ô∏è Rotaci√≥n simple hacia la izquierda"""
        y = x.right             # y ser√° la nueva ra√≠z
        T2 = y.left             # Guardamos el sub√°rbol izquierdo de y
        
        # Realizamos la rotaci√≥n
        y.left = x              # x se convierte en hijo izquierdo de y
        x.right = T2            # T2 se convierte en hijo derecho de x
        
        # Actualizamos alturas (primero x, luego y)
        self.update_height(x)   # Actualizar altura de x primero
        self.update_height(y)   # Actualizar altura de y despu√©s
        
        return y                # y es la nueva ra√≠z
    
    def insert(self, node, val):
        """‚ûï Inserta un valor en el √°rbol AVL manteniendo el balance"""
        # Paso 1: Inserci√≥n normal de BST
        if not node:            # Si llegamos a una posici√≥n vac√≠a
            return AVLNode(val) # Crear un nuevo nodo
        
        if val < node.val:      # Si el valor es menor
            node.left = self.insert(node.left, val)    # Insertar en sub√°rbol izquierdo
        elif val > node.val:    # Si el valor es mayor
            node.right = self.insert(node.right, val)  # Insertar en sub√°rbol derecho
        else:                   # Si el valor ya existe
            return node         # No insertar duplicados
        
        # Paso 2: Actualizar altura del nodo actual
        self.update_height(node)
        
        # Paso 3: Obtener el factor de balance
        balance = self.get_balance(node)
        
        # Paso 4: Realizar rotaciones si es necesario
        # Caso Left-Left: balance > 1 y el nuevo nodo est√° en el sub√°rbol izquierdo del hijo izquierdo
        if balance > 1 and val < node.left.val:
            return self.rotate_right(node)
        
        # Caso Right-Right: balance < -1 y el nuevo nodo est√° en el sub√°rbol derecho del hijo derecho
        if balance < -1 and val > node.right.val:
            return self.rotate_left(node)
        
        # Caso Left-Right: balance > 1 y el nuevo nodo est√° en el sub√°rbol derecho del hijo izquierdo
        if balance > 1 and val > node.left.val:
            node.left = self.rotate_left(node.left)     # Rotaci√≥n izquierda en hijo izquierdo
            return self.rotate_right(node)              # Rotaci√≥n derecha en nodo actual
        
        # Caso Right-Left: balance < -1 y el nuevo nodo est√° en el sub√°rbol izquierdo del hijo derecho
        if balance < -1 and val < node.right.val:
            node.right = self.rotate_right(node.right)  # Rotaci√≥n derecha en hijo derecho
            return self.rotate_left(node)               # Rotaci√≥n izquierda en nodo actual
        
        return node             # Retornar el nodo (sin cambios si no hubo rotaciones)
    
    def print_level_order(self, root):
        """üì° Level-order print with heights"""
        if not root:            # Si el √°rbol est√° vac√≠o
            return              # No imprimir nada
        
        queue = deque([root])   # Cola para BFS, comenzando con la ra√≠z
        
        while queue:            # Mientras la cola no est√© vac√≠a
            level_size = len(queue)     # N√∫mero de nodos en el nivel actual
            level_nodes = []            # Lista para almacenar nodos del nivel actual
            
            # Procesar todos los nodos del nivel actual
            for i in range(level_size):
                node = queue.popleft()  # Sacar el primer nodo de la cola
                
                # Agregar informaci√≥n del nodo al nivel actual
                level_nodes.append(f"{node.val}(h{node.height})")
                
                # Agregar hijos a la cola para el siguiente nivel
                if node.left:           # Si tiene hijo izquierdo
                    queue.append(node.left)     # Agregarlo a la cola
                if node.right:          # Si tiene hijo derecho
                    queue.append(node.right)    # Agregarlo a la cola
            
            # Imprimir todos los nodos del nivel actual en una l√≠nea
            print(", ".join(level_nodes))

# üß™ Test it!
def test_level_order_heights():
    """üß™ Funci√≥n de prueba para el recorrido por niveles"""
    avl = AVLTree()             # Crear una instancia del √°rbol AVL
    root = None                 # Inicializar la ra√≠z como vac√≠a
    
    # Insertar valores en el √°rbol AVL
    for val in [10, 5, 15, 2, 7]:
        root = avl.insert(root, val)    # Insertar cada valor y actualizar la ra√≠z
    
    print("üß™ Test 1‚Äì5: Expected output:")
    print("Actual output:")
    avl.print_level_order(root)         # Imprimir el recorrido por niveles

# üöÄ Go!
test_level_order_heights()

# üß™ Pruebas adicionales
def additional_tests():
    """üî¨ Pruebas adicionales para verificar todos los casos"""
    avl = AVLTree()
    
    # Test 1: √Årbol simple [10, 5, 15]
    print("\nüìã Test 1: √Årbol [10, 5, 15]")
    root1 = None
    for val in [10, 5, 15]:
        root1 = avl.insert(root1, val)
    avl.print_level_order(root1)
    
    # Test 2: √Årbol vac√≠o
    print("\nüìã Test 2: √Årbol vac√≠o")
    avl.print_level_order(None)
    
    # Test 3: √Årbol con un solo nodo
    print("\nüìã Test 3: √Årbol con un solo nodo")
    root3 = avl.insert(None, 42)
    avl.print_level_order(root3)
    
    # Test 4: √Årbol m√°s grande
    print("\nüìã Test 4: √Årbol m√°s grande [50, 25, 75, 10, 30, 60, 80, 5, 15]")
    root4 = None
    for val in [50, 25, 75, 10, 30, 60, 80, 5, 15]:
        root4 = avl.insert(root4, val)
    avl.print_level_order(root4)

additional_tests()