class AVLNode:
    """üå≥ Clase que representa un nodo del √°rbol AVL"""
    def __init__(self, key):
        self.key = key          # Valor del nodo
        self.left = None        # Hijo izquierdo
        self.right = None       # Hijo derecho
        self.height = 1         # Altura del nodo (inicialmente 1)

class AVLTree:
    """üå≤ Clase principal del √°rbol AVL con verificador de balance"""
    
    def get_height(self, root):
        """üìè Obtiene la altura de un nodo"""
        if not root:            # Si el nodo es None (vac√≠o)
            return 0            # La altura es 0
        return root.height      # Retorna la altura almacenada en el nodo
    
    def get_balance(self, root):
        """‚öñÔ∏è Calcula el factor de balance de un nodo"""
        if not root:            # Si el nodo es None
            return 0            # El balance es 0
        # Balance = altura del sub√°rbol izquierdo - altura del sub√°rbol derecho
        return self.get_height(root.left) - self.get_height(root.right)
    
    def is_avl_balanced(self, root):
        """üìè Verifica si el √°rbol es un AVL v√°lido"""
        # Funci√≥n auxiliar que retorna la altura si es v√°lido, -1 si no es v√°lido
        def check_balance_and_height(node):
            if not node:                    # Caso base: nodo vac√≠o
                return 0                    # Altura 0 (v√°lido)
            
            # Verificar recursivamente el sub√°rbol izquierdo
            left_height = check_balance_and_height(node.left)
            if left_height == -1:           # Si el sub√°rbol izquierdo no es v√°lido
                return -1                   # Propagar el error hacia arriba
            
            # Verificar recursivamente el sub√°rbol derecho
            right_height = check_balance_and_height(node.right)
            if right_height == -1:          # Si el sub√°rbol derecho no es v√°lido
                return -1                   # Propagar el error hacia arriba
            
            # Calcular el factor de balance del nodo actual
            balance_factor = left_height - right_height
            
            # Verificar si el factor de balance est√° en el rango v√°lido [-1, 1]
            if abs(balance_factor) > 1:     # Si el balance excede los l√≠mites
                return -1                   # El √°rbol no es AVL v√°lido
            
            # Si llegamos aqu√≠, el nodo es v√°lido
            # Retornar la altura del nodo actual (m√°ximo de sub√°rboles + 1)
            return max(left_height, right_height) + 1
        
        # Llamar a la funci√≥n auxiliar y verificar si el resultado es v√°lido
        result = check_balance_and_height(root)
        return result != -1                 # True si es v√°lido, False si no
    
    def insert(self, root, key):
        """üîß M√©todo auxiliar para insertar nodos (para testing)"""
        # Inserci√≥n normal de BST
        if not root:                        # Si no hay nodo, crear uno nuevo
            return AVLNode(key)
        
        if key < root.key:                  # Si la clave es menor
            root.left = self.insert(root.left, key)     # Insertar en sub√°rbol izquierdo
        elif key > root.key:                # Si la clave es mayor
            root.right = self.insert(root.right, key)   # Insertar en sub√°rbol derecho
        else:                               # Si la clave ya existe
            return root                     # No insertar duplicados
        
        # Actualizar altura del nodo actual
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        
        # Obtener factor de balance
        balance = self.get_balance(root)
        
        # Rotaciones para mantener balance AVL
        # Rotaci√≥n derecha (caso Left-Left)
        if balance > 1 and key < root.left.key:
            return self.rotate_right(root)
        
        # Rotaci√≥n izquierda (caso Right-Right)
        if balance < -1 and key > root.right.key:
            return self.rotate_left(root)
        
        # Rotaci√≥n izquierda-derecha (caso Left-Right)
        if balance > 1 and key > root.left.key:
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)
        
        # Rotaci√≥n derecha-izquierda (caso Right-Left)
        if balance < -1 and key < root.right.key:
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)
        
        return root                         # Retornar el nodo (sin cambios si est√° balanceado)
    
    def rotate_left(self, z):
        """üîÑ Rotaci√≥n izquierda"""
        y = z.right                         # y es el hijo derecho de z
        T2 = y.left                         # T2 es el sub√°rbol izquierdo de y
        
        # Realizar rotaci√≥n
        y.left = z                          # z se convierte en hijo izquierdo de y
        z.right = T2                        # T2 se convierte en hijo derecho de z
        
        # Actualizar alturas
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        
        return y                            # y es la nueva ra√≠z
    
    def rotate_right(self, z):
        """üîÑ Rotaci√≥n derecha"""
        y = z.left                          # y es el hijo izquierdo de z
        T3 = y.right                        # T3 es el sub√°rbol derecho de y
        
        # Realizar rotaci√≥n
        y.right = z                         # z se convierte en hijo derecho de y
        z.left = T3                         # T3 se convierte en hijo izquierdo de z
        
        # Actualizar alturas
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        
        return y                            # y es la nueva ra√≠z

# üß™ Casos de prueba completos
def test_is_avl_balanced():
    """üß™ Funci√≥n que ejecuta todos los tests"""
    avl = AVLTree()
    
    # Test 1: √Årbol balanceado retorna True
    print("üß™ Test 1: √Årbol balanceado")
    root = None
    for val in [20, 10, 30]:               # Insertar valores para crear √°rbol balanceado
        root = avl.insert(root, val)
    result1 = avl.is_avl_balanced(root)
    print(f"   Resultado: {result1} (Esperado: True) {'‚úÖ' if result1 == True else '‚ùå'}")
    
    # Test 2: √Årbol manualmente desbalanceado retorna False
    print("\nüß™ Test 2: √Årbol desbalanceado manualmente")
    unbalanced = AVLNode(10)               # Crear √°rbol desbalanceado manualmente
    unbalanced.right = AVLNode(20)         # Solo hijos derechos (como una lista)
    unbalanced.right.right = AVLNode(30)
    result2 = avl.is_avl_balanced(unbalanced)
    print(f"   Resultado: {result2} (Esperado: False) {'‚úÖ' if result2 == False else '‚ùå'}")
    
    # Test 3: √Årbol vac√≠o retorna True
    print("\nüß™ Test 3: √Årbol vac√≠o")
    result3 = avl.is_avl_balanced(None)
    print(f"   Resultado: {result3} (Esperado: True) {'‚úÖ' if result3 == True else '‚ùå'}")
    
    # Test 4: √Årbol con desbalance profundo retorna False
    print("\nüß™ Test 4: √Årbol con desbalance profundo")
    deep_unbalanced = AVLNode(1)           # Crear una cadena larga hacia la derecha
    current = deep_unbalanced
    for i in range(2, 6):                  # Agregar nodos 2, 3, 4, 5
        current.right = AVLNode(i)
        current = current.right
    result4 = avl.is_avl_balanced(deep_unbalanced)
    print(f"   Resultado: {result4} (Esperado: False) {'‚úÖ' if result4 == False else '‚ùå'}")
    
    # Test 5: √Årbol que cumple todas las reglas AVL retorna True
    print("\nüß™ Test 5: √Årbol AVL v√°lido complejo")
    root_complex = None
    for val in [50, 25, 75, 10, 30, 60, 80, 5, 15]:  # Insertar m√∫ltiples valores
        root_complex = avl.insert(root_complex, val)
    result5 = avl.is_avl_balanced(root_complex)
    print(f"   Resultado: {result5} (Esperado: True) {'‚úÖ' if result5 == True else '‚ùå'}")
    
    # Resumen de resultados
    print(f"\nüìä Resumen: {sum([result1, not result2, result3, not result4, result5])}/5 tests pasaron")

# üöÄ Ejecutar todas las pruebas
if __name__ == "__main__":
    print("üå≥ Iniciando verificador de balance AVL...")
    test_is_avl_balanced()