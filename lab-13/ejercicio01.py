class MinHeap:
    # ğŸ“¦ MinHeap data structure using list
    def __init__(self):
        # Initialize empty list for heap
        self.heap = []  # Crea una lista vacÃ­a que almacenarÃ¡ los elementos del heap
    
    def is_empty(self):
        # Return True if heap is empty
        return len(self.heap) == 0  # Retorna True si la longitud de la lista es 0 (vacÃ­a), False si contiene elementos

# ğŸ§ª Test cases
def test_min_heap_init_and_empty():
    h = MinHeap()  # Crear una nueva instancia de MinHeap
    print("ğŸŒ± Test 1:", h.is_empty() == True)  # Verificar que el heap reciÃ©n creado estÃ© vacÃ­o
    h.heap.append(1)  # Agregar el elemento 1 directamente a la lista del heap
    print("ğŸŒ± Test 2:", h.is_empty() == False)  # Verificar que el heap ya no estÃ© vacÃ­o
    h.heap.clear()  # Limpiar toda la lista, eliminando todos los elementos
    print("ğŸŒ± Test 3:", h.is_empty() == True)  # Verificar que despuÃ©s de clear() el heap estÃ© vacÃ­o
    h.heap.extend([2,3,4])  # Agregar mÃºltiples elementos [2,3,4] a la lista
    print("ğŸŒ± Test 4:", h.is_empty() == False)  # Verificar que con elementos el heap no estÃ© vacÃ­o
    h.heap.pop(); h.heap.pop(); h.heap.pop()  # Eliminar todos los elementos uno por uno con pop()
    print("ğŸŒ± Test 5:", h.is_empty() == True)  # Verificar que despuÃ©s de eliminar todos los elementos estÃ© vacÃ­o

test_min_heap_init_and_empty()  # Ejecutar la funciÃ³n de pruebas